package view;

import java.io.File;
import java.util.List;

import javafx.scene.Group;
import model.ModelController;
import model.dictionaries.CommandDictionary;
import model.dictionaries.TurtleList;
import model.dictionaries.VariableDictionary;
import model.state.State;
import view.panels.TabPanel;
import view.screens.ErrorScreen;
import view.screens.MainScreen;

/**
 * Controls/defines interface for frontend display (view) based on model values given from the 
 * model controller.
 * 
 * @author Katherine Van Dyk
 * @author Brandon Dalla Rosa
 * @date 3/1/18
 *
 */
public class ViewController {

    private MainScreen mainScreen;
    private ModelController controller;
    private CommandDictionary commandDictionary;
    private VariableDictionary variableDictionary;
    protected TabPanel tabPane;
    private TurtleList turtleList;

    /**
     * Initializes view controller baed on dictionaries and controller, 
     * needed for controlling switching between tabs in the main screen.
     */
    public void initialize(ModelController c, CommandDictionary commandDict, VariableDictionary varDict, TurtleList turtList) {
	controller = c;
	variableDictionary= varDict;
	commandDictionary = commandDict;
	turtleList = turtList;
    }

    /**
     * Calls the Screen object to generate a start screen to display 
     * to the user upon application start up. Assigns the instance variable
     * @param PROGRAM_SCENE to allow for easy root changes to change scenes. 
     * @return 
     */
    public void constructMainScreen(int width, int height) {
	mainScreen = new MainScreen(width, height,  controller, variableDictionary, commandDictionary, turtleList);
    }
    
    /**
     * Returns main screen center pane (all components of screen except tabs)
     * 
     * @param width, height: screen width and height, respectively
     * @return Group containing all components of main pane
     */
    public Group getPane(int width, int height) {
	constructMainScreen(width, height);
	return mainScreen.getRoot();
    }
    
    /**
     * Updates turtle based on states generated from command/parser
     * @param states: list of state objects dictating how turtle object updates
     */
    public void updateTurtle(List<State> states) {
	mainScreen.updateTurtle(states);
    }

    /**
     * Toggles turtle if mouse click is within the range of the turtle
     * @param x, y: coordinates of mouse click on main screen
     */
    public void toggleTurtle(double x, double y) {
	mainScreen.toggleTurtle(x,y);
    }

    /**
     * Creates error screen to display @param message generated by parser/commands
     */
    public void sendError(String message) {
	ErrorScreen error = new ErrorScreen();
	error.sendError(message);
    }
    
    /**
     * Prompts main screen to read @param file containing a saved workspace,
     * so that the main screen can update workspace preferences
     */
    public void readFile(File file) {
	mainScreen.readFile(file);
    }
}
